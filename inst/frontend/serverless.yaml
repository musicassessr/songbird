
service: singpause-fe
useDotenv: true

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  profile: ${env:AWS_PROFILE}
  deploymentBucket:
    name: ${env:DEPLOYMENT_BUCKET}

plugins:
- serverless-deployment-bucket
- serverless-finch

custom:
  domainName: ${env:DOMAIN_NAME}
  client:
    distributionFolder: build
    indexDocument: index.html
    errorDocument: index.html
    bucketName: ${self:custom.domainName}

resources:
  Resources:
    # S3 Bucket
    AppBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Delete
      Properties:
        PublicAccessBlockConfiguration:
                BlockPublicAcls: false
        OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter
        BucketName: ${self:custom.client.bucketName}
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    # Specifying the policies to make sure all files inside the Bucket are avaialble
    AppBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: AppBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.client.bucketName}/*
    #   CloudFront distribution
    AppDistribution:
      Type: AWS::CloudFront::Distribution
      DeletionPolicy: Delete
      Properties:
        DistributionConfig:
          Enabled: true
          PriceClass: PriceClass_100
          HttpVersion: http2
          Comment: CDN for ${self:custom.domainName}
          DefaultRootObject: index.html

          Origins:
            - Id: FrontendOrigin
              DomainName: !GetAtt AppBucket.RegionalDomainName
              S3OriginConfig: { }
          DefaultCacheBehavior:
            # ======================== Default CacheBehavior  ========================
            TargetOriginId: FrontendOrigin
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
            Compress: true
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            ForwardedValues:
              Cookies:
                Forward: all
              QueryString: true
          Aliases:
            - ${self:custom.domainName}
          ViewerCertificate:
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
            AcmCertificateArn: ${env:CERTIFICATE_ARN_NVIRIGNIA}
          CustomErrorResponses:
            - ErrorCachingMinTTL: 10
              ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
            - ErrorCachingMinTTL: 10
              ErrorCode: 400
              ResponseCode: 200
              ResponsePagePath: /index.html
            - ErrorCachingMinTTL: 10
              ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html
    # #   Route 53
    AppRecord:
      Type: AWS::Route53::RecordSetGroup
      DeletionPolicy: Delete
      Properties:
        HostedZoneName: ${env:HOSTED_ZONE_NAME}
        RecordSets:
          - Name: ${self:custom.domainName}
            Type: A
            AliasTarget:
              HostedZoneId: Z2FDTNDATAQYW2 # CloudFront Default HostedZoneId
              DNSName: { 'Fn::GetAtt': [ AppDistribution, DomainName ] }