name: Deploy Shiny App On Dev

on:
  push:
    branches:
      - prod
      - devel
      
permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout
jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      shiny: ${{ steps.changes.outputs.shiny }}
      frontend: ${{ steps.changes.outputs.frontend }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v3
      id: changes
      with:
        base: ${{ github.ref }}
        filters: |
          frontend:
            - 'inst/frontend/**'
          shiny:
            - '!inst/frontend/**'
            - '!.github/**'  
  deploy:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.shiny == 'true' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up R
      uses: r-lib/actions/setup-r@v2

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libcurl4-openssl-dev libssl-dev libxml2-dev libgit2-dev libicu-dev libssh2-1-dev libfontconfig1-dev libharfbuzz-dev libfribidi-dev libjpeg-dev libpng-dev libtiff-dev

    - name: Install R and renv dependencies
      run: |
        Rscript -e "install.packages('devtools', repos='https://cran.rstudio.com/')"
        Rscript -e "install.packages('renv', repos='https://cran.rstudio.com/')"

    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        echo -e "Host *\n  StrictHostKeyChecking no" > ~/.ssh/config

    - name: Deploy to Shiny Server
      run: |
        if [ "${{ github.ref }}" == "refs/heads/prod" ]; then
          SSH_HOST="${{ secrets.SSH_HOST_PROD }}"
        else
          SSH_HOST="${{ secrets.SSH_HOST_DEV }}"
        fi
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@$SSH_HOST <<EOF
        set -e
        for dir in /srv/shiny-server/singpause-saa /srv/shiny-server/singpause-singalong /srv/shiny-server/singpause-solo; do
          echo "now installing in \$dir"
          cd \$dir
          sudo chown -R ${{ secrets.SSH_USER }}:\$USER renv/library/R-4.1/x86_64-pc-linux-gnu
          Rscript -e "Sys.setenv(GITHUB_PAT = Sys.getenv('MY_GITHUB_PAT')); devtools::install_github('sebsilas/songbird', upgrade = 'always')"
        done
        EOF

    - name: Restart Shiny Server
      run: |
        if [ "${{ github.ref }}" == "refs/heads/prod" ]; then
          SSH_HOST="${{ secrets.SSH_HOST_PROD }}"
        else
          SSH_HOST="${{ secrets.SSH_HOST_DEV }}"
        fi
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@$SSH_HOST <<EOF
        sudo systemctl restart shiny-server
        EOF
      env:
        SSH_USER: ${{ secrets.SSH_USER }}
        SSH_HOST_DEV: ${{ secrets.SSH_HOST_DEV }}
        SSH_HOST_PROD: ${{ secrets.SSH_HOST_PROD }}
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

  deploy-dev:
    needs: changes
    runs-on: ubuntu-latest
    env:
      AWS_REGION : "us-east-1"
      DEV_ENV_FILE : ${{ secrets.DEV_ENV_FILE }}
    if: ${{ github.ref == 'refs/heads/devel' && needs.changes.outputs.frontend == 'true' }}
    defaults:
      run:
        working-directory: ./inst/frontend
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4
      - name: Install dependenecies and configure env file
        uses: actions/setup-node@v4
      - run: yarn install
      - run : yarn add serverless@3.x
      - run: echo "$DEV_ENV_FILE" | base64 -d > .env.dev
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.GH_DEV_ROLE }}
          role-session-name: dev_role
          aws-region: ${{ env.AWS_REGION }}
      - name: BUILD && DEPLOY ON DEV 
        run: yarn deploy
